if (Boolean.valueOf(rootProject.ext.isModule)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'com.jakewharton.butterknife'
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        //Arouter路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath = true
            }
        }
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.wd.health",
                JPUSH_APPKEY : "564c4319e940cdd0aadeebf0", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //ButterKnife需要   model中的andorid选项中   兼容java8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //layout分包
    sourceSets {
        main {
            res.srcDirs =
                    [
                            'src/main/res/layout/items',
                            'src/main/res/layout/adapters',
                            'src/main/res/layout/fragments',
                            'src/main/res/layout/activitys',
                            'src/main/res/layout',
                            'src/main/res'
                    ]
        }
    }
    //防止 xrecyclerview
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '28.0.0'
                }
            }
        }
    }

    //在Home下的build.gradle文件中配置AndroidManifest.xml
    //false是release包  release包本mode是library  不可以单独运行
    //true是debug包  debug包可以当做mode 可以单独运行
    sourceSets {
        main {
            if (Boolean.valueOf(rootProject.ext.isModule)) {//apk
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/library/AndroidManifest.xml'
                java {
                    //library模式下，排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }

    packagingOptions {
        exclude 'lib/armeabi-v7a/libijkplayer.so'
        pickFirst 'lib/armeabi-v7a/libnms.so'
        pickFirst 'lib/x86/libijksdl.so'
        pickFirst 'lib/x86/libijkplayer.so'
        pickFirst 'lib/x86_64/libijksdl.so'
        pickFirst 'lib/x86_64/libijkplayer.so'
        //c c++ 软解硬解  解码
        pickFirst 'lib/x86/libijkffmpeg.so'
        pickFirst 'lib/arm64-v8a/libijkplayer.so'
        pickFirst 'lib/arm64-v8a/libijkffmpeg.so'
        pickFirst 'lib/armeabi-v7a/libijkffmpeg.so'
        pickFirst 'lib/x86_64/libijkffmpeg.so'
        pickFirst 'lib/arm64-v8a/libijksdl.so'
        pickFirst 'lib/armeabi-v7a/libijksdl.so'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation rootProject.ext.dependencies["okhttp3"]
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["retrofit-converter-gson"]
    implementation rootProject.ext.dependencies["retrofit-adapter-rxjava"]
    implementation rootProject.ext.dependencies["converter-scalars"]
    implementation rootProject.ext.dependencies["recyclerview-v7"]
    implementation rootProject.ext.dependencies["banner"]
    implementation rootProject.ext.dependencies["autosize"]
    implementation rootProject.ext.dependencies["tablayout"]
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    implementation rootProject.ext.dependencies["fresco"]
    annotationProcessor 'com.alibaba:arouter-compiler:+' //流失布局
    implementation 'com.hyman:flowlayout-lib:1.1.2'
    //快速适配
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    //glide图片获取
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation project(':common')
    implementation project(':circle')
    implementation project(':video')
    implementation project(':my_message')
    implementation 'cn.jiguang.sdk:jmessage:2.9.0'  // 此处以JMessage 2.9.0 版本为例。
    implementation 'cn.jiguang.sdk:jcore:2.0.0'  // 此处以JCore 2.0.0 版本为例。
    //1.1.0 API改动过大，老用户升级需谨慎
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-14'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-14'//没有使用特殊Header，可以不加这行
    implementation 'com.android.support:appcompat-v7:25.3.1'//版本 23以上（必须）
}
